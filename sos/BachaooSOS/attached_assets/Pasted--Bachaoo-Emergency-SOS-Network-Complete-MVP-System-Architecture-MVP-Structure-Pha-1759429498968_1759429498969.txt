# Bachaoo - Emergency SOS Network
## Complete MVP & System Architecture

### **MVP Structure (Phase 1)**

**Core Features:**
1. One-tap SOS button with location sharing
2. 2km radius alert system for app users
3. Audio recording during emergencies
4. Emergency contact notifications via SMS
5. Simple map view showing nearby helpers

**Tech Stack:**
- **Frontend:** Next.js PWA (Progressive Web App)
- **Backend:** Node.js + Express / Next.js API Routes
- **Database:** MongoDB/Supabase (for quick MVP)
- **Real-time:** Socket.io or Pusher
- **SMS:** Twilio or local Pakistani SMS provider
- **Maps:** Google Maps API / Mapbox
- **Push:** Firebase Cloud Messaging (FCM)

---

### **Complete System Architecture**

#### **1. Database Schema**

```javascript
// Users Collection
{
  _id: ObjectId,
  phone: "+92XXXXXXXXX",
  name: "Ali Ahmed",
  emergency_contacts: [
    {name: "Father", phone: "+92XXXXXXXXX"},
    {name: "Friend", phone: "+92XXXXXXXXX"}
  ],
  location: {
    lat: 31.5204,
    lng: 74.3587,
    last_updated: "2024-01-15T10:30:00Z"
  },
  subscription: "free/premium",
  created_at: timestamp
}

// SOS Events Collection
{
  _id: ObjectId,
  user_id: ObjectId,
  location: {lat: 31.5204, lng: 74.3587},
  audio_recording: "audio_url", // Optional
  status: "active/resolved",
  timestamp: "2024-01-15T10:30:00Z",
  responders: [
    {user_id: ObjectId, status: "responding", distance: 1.2}
  ],
  resolved_by: ObjectId
}

// Response Network Collection
{
  user_id: ObjectId,
  is_online: true,
  last_location: {lat, lng},
  response_count: 15,
  rating: 4.8,
  available: true
}
```

#### **2. Key API Endpoints**

```javascript
// Emergency APIs
POST /api/sos/trigger
// Body: {user_id, location, record_audio?}

POST /api/sos/respond
// Body: {sos_id, responder_id, status}

GET /api/sos/nearby?lat=31.52&lng=74.35&radius=2
// Returns nearby active SOS events

// User Management
POST /api/users/location
// Body: {user_id, location}

POST /api/users/register
// Body: {phone, name, emergency_contacts}

// Notification APIs
POST /api/notify/sms
POST /api/notify/push
```

#### **3. Real-time Alert System**

**For App Users (Within 2km):**
```javascript
// Using WebSockets/Socket.io
socket.on('sos_alert', (data) => {
  showEmergencyAlert({
    distance: data.distance + ' km away',
    location: data.location_address,
    type: data.emergency_type, // harassment, medical, etc.
    responder_count: data.responder_count
  });
});
```

**For Non-App Users (SMS Blast):**
```javascript
// Get all phone numbers in 2km radius from telecom data partners
// Or use community-reported numbers in area

async function notifyNonAppUsers(sosEvent) {
  const phonesInRadius = await getPhonesInRadius(
    sosEvent.location, 
    2000 // 2km
  );
  
  phonesInRadius.forEach(phone => {
    sendSMS(phone, 
      `EMERGENCY ALERT: Someone needs help near ${getAreaName(sosEvent.location)}. 
      If you can help, go to location or call authorities. 
      Reply STOP to opt-out.`
    );
  });
}
```

#### **4. Location & Area Analysis Engine**

```javascript
// Crowdsourced Area Analysis
class AreaAnalyzer {
  constructor() {
    this.hotspots = new Map();
    this.responseTimes = new Map();
  }
  
  // Analyze area for safety score
  calculateAreaSafety(lat, lng) {
    const incidents = getRecentIncidents(lat, lng, 5000); // 5km radius
    const responseTime = getAverageResponseTime(lat, lng);
    const helperDensity = getHelperDensity(lat, lng);
    
    return {
      safety_score: (helperDensity * 0.4) + 
                   ((300 - responseTime) * 0.3) + 
                   ((100 - incidents) * 0.3),
      risk_level: incidents > 10 ? 'high' : incidents > 5 ? 'medium' : 'low',
      recommended_actions: this.getSafetyRecommendations(lat, lng)
    };
  }
  
  // Automatic helper dispatch to low-density areas
  autoDispatchHelpers(sosEvent) {
    const nearbyHelpers = getUsersInRadius(sosEvent.location, 2000);
    
    if (nearbyHelpers.length < 3) {
      // Expand radius and notify more distant helpers
      const extendedHelpers = getUsersInRadius(sosEvent.location, 5000);
      this.notifyPriorityHelpers(extendedHelpers, sosEvent);
    }
  }
}
```

#### **5. Audio Analysis & Keyword Detection**

```javascript
// Real-time Audio Processing
class EmergencyAudioAnalyzer {
  constructor() {
    this.keywordTriggers = [
      'bachao', 'help', 'madad', 'police', 
      'roklo', 'attack', 'harrassment'
    ];
  }
  
  async analyzeAudio(audioBlob) {
    // Convert speech to text
    const transcription = await this.speechToText(audioBlob);
    
    // Check for emergency keywords
    const detectedKeywords = this.keywordTriggers.filter(
      keyword => transcription.toLowerCase().includes(keyword)
    );
    
    // Analyze tone/emotion (stress detection)
    const stressLevel = await this.analyzeStress(audioBlob);
    
    return {
      transcription,
      keywords: detectedKeywords,
      stress_level: stressLevel,
      confidence: this.calculateEmergencyConfidence(
        detectedKeywords, 
        stressLevel
      )
    };
  }
  
  calculateEmergencyConfidence(keywords, stress) {
    let score = keywords.length * 20;
    score += stress * 30;
    return Math.min(score, 100);
  }
}
```

#### **6. Frontend Components Structure**

```jsx
// Main SOS Button Component
const SOSButton = () => {
  const [emergencyMode, setEmergencyMode] = useState(false);
  
  const triggerSOS = async () => {
    // Get current location
    const location = await getCurrentLocation();
    
    // Start audio recording
    const audioStream = await startAudioRecording();
    
    // Send SOS to backend
    const response = await fetch('/api/sos/trigger', {
      method: 'POST',
      body: JSON.stringify({
        user_id: userId,
        location,
        record_audio: true
      })
    });
    
    // Show confirmation and count responders
    setEmergencyMode(true);
  };
  
  return (
    <div className="sos-container">
      <button 
        className={`sos-button ${emergencyMode ? 'active' : ''}`}
        onTouchStart={triggerSOS}
        onMouseDown={triggerSOS}
      >
        {emergencyMode ? 'HELP IS COMING' : 'SOS'}
      </button>
      
      {emergencyMode && <ResponderMap sosId={currentSOSId} />}
    </div>
  );
};

// Real-time Responder Map
const ResponderMap = ({sosId}) => {
  const [responders, setResponders] = useState([]);
  
  useEffect(() => {
    // Subscribe to real-time updates
    const socket = io(API_URL);
    socket.on(`sos_${sosId}`, (data) => {
      setResponders(data.responders);
    });
    
    return () => socket.disconnect();
  }, [sosId]);
  
  return (
    <div className="responder-map">
      <GoogleMap>
        {/* Show responder locations */}
        {responders.map(responder => (
          <Marker 
            position={responder.location}
            title={`Helper ${responder.distance}km away`}
          />
        ))}
      </GoogleMap>
      <div className="responder-count">
        {responders.length} people responding
      </div>
    </div>
  );
};
```

#### **7. Advanced Alert Logic**

```javascript
// Smart Notification System
class SmartAlertSystem {
  async sendEmergencyAlerts(sosEvent) {
    // 1. Notify emergency contacts via SMS
    await this.notifyEmergencyContacts(sosEvent);
    
    // 2. Notify app users within 2km via push
    await this.notifyAppUsers(sosEvent);
    
    // 3. Analyze area helper density
    const helperDensity = await this.getHelperDensity(sosEvent.location);
    
    // 4. If low density, send SMS to non-app users in area
    if (helperDensity < 0.5) { // Less than 0.5 helpers per km²
      await this.notifyNonAppUsers(sosEvent);
    }
    
    // 5. Auto-escalate to authorities if no response in 2 minutes
    setTimeout(async () => {
      const responderCount = await this.getResponderCount(sosEvent._id);
      if (responderCount < 2) {
        await this.escalateToAuthorities(sosEvent);
      }
    }, 120000); // 2 minutes
  }
  
  async notifyNonAppUsers(sosEvent) {
    // Partner with telecom companies for location-based SMS
    // Or use community-reported contact networks
    
    const areaContacts = await this.getAreaContacts(
      sosEvent.location, 
      2000
    );
    
    for (const contact of areaContacts) {
      await sendSMS(contact.phone, 
        `URGENT: Emergency reported near you. 
        Location: ${this.getLocationDescription(sosEvent.location)}
        If safe, please check or call 15.`
      );
    }
  }
}
```

#### **8. Deployment & Scaling Strategy**

**Phase 1 (MVP - 2 months):**
- Launch in 2-3 universities in Lahore/Islamabad
- Basic SOS + location sharing
- SMS notifications to emergency contacts only

**Phase 2 (3-6 months):**
- Add audio recording and analysis
- Implement 2km radius alerts for app users
- Community response features

**Phase 3 (6-12 months):**
- Telecom partnerships for non-app user alerts
- AI-powered emergency classification
- Integration with police/ambulance services

#### **9. Monetization Features**

```javascript
// Premium Features (₹200/month)
const PREMIUM_FEATURES = {
  advanced_analytics: true,
  priority_alerts: true, // Your SOS shown first to helpers
  family_tracking: true, // Real-time location of family members
  emergency_insurance: true, // Small insurance coverage
  offline_mode: true, // Works without internet
  voice_commands: true // "Hey Bachaoo, emergency!"
};
```

#### **10. Privacy & Security**

```javascript
// Privacy Protection
class PrivacyManager {
  // Auto-delete location data after 24 hours
  async cleanupOldLocations() {
    await db.locations.deleteMany({
      timestamp: { $lt: Date.now() - 24 * 60 * 60 * 1000 }
    });
  }
  
  // Anonymize helper data
  anonymizeHelperData(helper) {
    return {
      distance: helper.distance,
      rating: helper.rating,
      response_time: helper.avg_response_time,
      // No personal identifiers
    };
  }
  
  // Emergency data encryption
  encryptEmergencyData(sosData) {
    return crypto.encrypt(JSON.stringify(sosData));
  }
}
```

This architecture provides:
- **Immediate MVP** that can be built in 4-6 weeks
- **Scalable foundation** for advanced features
- **Privacy-focused design** for sensitive emergency data
- **Multiple notification channels** (app, SMS, push)
- **Smart area analysis** for optimal response coordination

The key innovation is using **crowdsourced area analysis** to automatically identify areas with low helper density and proactively send alerts, creating a true community safety network that works even for non-app users through SMS blasts.